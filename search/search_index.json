{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HTTPX OAuth \u00b6 Async OAuth client using HTTPX Documentation : https://frankie567.github.io/httpx-oauth/ Source Code : https://github.com/frankie567/httpx-oauth Installation \u00b6 pip install httpx-oauth Contributors \u2728 \u00b6 Thanks goes to these wonderful people ( emoji key ): Fran\u00e7ois Voron \ud83d\udea7 Xavi Torell\u00f3 \ud83d\udcbb dbf \ud83d\udcbb Kenton Parton \ud83d\udcbb stepan-chatalyan \ud83d\udcbb Foster Snowhill \ud83d\udcbb William Hatcher \ud83d\udcbb Matt Chan \ud83d\udce6 Goran Meki\u0107 \ud83d\udce6 Joona Yoon \ud83d\udcbb LindezaGrey \ud83d\udcbb This project follows the all-contributors specification. Contributions of any kind welcome! Development \u00b6 Setup environment \u00b6 We use Hatch to manage the development environment and production build. Ensure it's installed on your system. Run unit tests \u00b6 You can run all the tests with: hatch run test Format the code \u00b6 Execute the following command to apply isort and black formatting: hatch run lint Serve the documentation \u00b6 You can serve the documentation locally with the following command: hatch run docs The documentation will be available on http://localhost:8000 . License \u00b6 This project is licensed under the terms of the MIT license.","title":"About"},{"location":"#httpx-oauth","text":"Async OAuth client using HTTPX Documentation : https://frankie567.github.io/httpx-oauth/ Source Code : https://github.com/frankie567/httpx-oauth","title":"HTTPX OAuth"},{"location":"#installation","text":"pip install httpx-oauth","title":"Installation"},{"location":"#contributors","text":"Thanks goes to these wonderful people ( emoji key ): Fran\u00e7ois Voron \ud83d\udea7 Xavi Torell\u00f3 \ud83d\udcbb dbf \ud83d\udcbb Kenton Parton \ud83d\udcbb stepan-chatalyan \ud83d\udcbb Foster Snowhill \ud83d\udcbb William Hatcher \ud83d\udcbb Matt Chan \ud83d\udce6 Goran Meki\u0107 \ud83d\udce6 Joona Yoon \ud83d\udcbb LindezaGrey \ud83d\udcbb This project follows the all-contributors specification. Contributions of any kind welcome!","title":"Contributors \u2728"},{"location":"#development","text":"","title":"Development"},{"location":"#setup-environment","text":"We use Hatch to manage the development environment and production build. Ensure it's installed on your system.","title":"Setup environment"},{"location":"#run-unit-tests","text":"You can run all the tests with: hatch run test","title":"Run unit tests"},{"location":"#format-the-code","text":"Execute the following command to apply isort and black formatting: hatch run lint","title":"Format the code"},{"location":"#serve-the-documentation","text":"You can serve the documentation locally with the following command: hatch run docs The documentation will be available on http://localhost:8000 .","title":"Serve the documentation"},{"location":"#license","text":"This project is licensed under the terms of the MIT license.","title":"License"},{"location":"fastapi/","text":"FastAPI \u00b6 Utilities are provided to ease the integration of an OAuth2 process in FastAPI . OAuth2AuthorizeCallback \u00b6 Dependency callable to handle the authorization callback. It reads the query parameters and returns the access token and the state. Parameters client: OAuth2 : The OAuth2 client. route_name: Optional[str] : Name of the callback route, as defined in the name parameter of the route decorator. redirect_url: Optional[str] : Full URL to the callback route. Tip You should either set route_name , which will automatically reverse the URL, or redirect_url , which is an arbitrary URL you set. from httpx_oauth.integrations.fastapi import OAuth2AuthorizeCallback from httpx_oauth.oauth2 import OAuth2 client = OAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"AUTHORIZE_ENDPOINT\" , \"ACCESS_TOKEN_ENDPOINT\" ) oauth2_authorize_callback = OAuth2AuthorizeCallback ( client , \"oauth-callback\" ) app = FastAPI () @app . get ( \"/oauth-callback\" , name = \"oauth-callback\" ) async def oauth_callback ( access_token_state = Depends ( oauth2_authorize_callback )): token , state = access_token_state # Do something useful","title":"FastAPI"},{"location":"fastapi/#fastapi","text":"Utilities are provided to ease the integration of an OAuth2 process in FastAPI .","title":"FastAPI"},{"location":"fastapi/#oauth2authorizecallback","text":"Dependency callable to handle the authorization callback. It reads the query parameters and returns the access token and the state. Parameters client: OAuth2 : The OAuth2 client. route_name: Optional[str] : Name of the callback route, as defined in the name parameter of the route decorator. redirect_url: Optional[str] : Full URL to the callback route. Tip You should either set route_name , which will automatically reverse the URL, or redirect_url , which is an arbitrary URL you set. from httpx_oauth.integrations.fastapi import OAuth2AuthorizeCallback from httpx_oauth.oauth2 import OAuth2 client = OAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"AUTHORIZE_ENDPOINT\" , \"ACCESS_TOKEN_ENDPOINT\" ) oauth2_authorize_callback = OAuth2AuthorizeCallback ( client , \"oauth-callback\" ) app = FastAPI () @app . get ( \"/oauth-callback\" , name = \"oauth-callback\" ) async def oauth_callback ( access_token_state = Depends ( oauth2_authorize_callback )): token , state = access_token_state # Do something useful","title":"OAuth2AuthorizeCallback"},{"location":"oauth2/","text":"OAuth2 \u00b6 Generic client \u00b6 A generic OAuth2 class is provided to adapt to any OAuth2-compliant service. You can instantiate it like this: from httpx_oauth.oauth2 import OAuth2 client = OAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"AUTHORIZE_ENDPOINT\" , \"ACCESS_TOKEN_ENDPOINT\" , refresh_token_endpoint = \"REFRESH_TOKEN_ENDPOINT\" , revoke_token_endpoint = \"REVOKE_TOKEN_ENDPOINT\" , ) Note that refresh_token_endpoint and revoke_token_endpoint are optional since not every services propose to refresh and revoke tokens. Available methods \u00b6 get_authorization_url \u00b6 Returns the authorization URL where you should redirect the user to ask for their approval. Parameters redirect_uri: str : Your callback URI where the user will be redirected after the service prompt. state: str = None : Optional string that will be returned back in the callback parameters to allow you to retrieve state information. scope: Optional[List[str]] = None : Optional list of scopes to ask for. extras_params: Optional[Dict[str, Any]] = None : Optional dictionary containing parameters specific to the service. Example authorization_url = await client . get_authorization_url ( \"https://www.tintagel.bt/oauth-callback\" , scope = [ \"SCOPE1\" , \"SCOPE2\" , \"SCOPE3\" ], ) get_access_token \u00b6 Returns an OAuth2Token object for the service given the authorization code passed in the redirection callback. Raises a GetAccessTokenError if an error occurs. Parameters code: str : The authorization code passed in the redirection callback. redirect_uri: str : The exact same redirect_uri you passed to the authorization URL. code_verifier: Optional[str] : Optional code verifier in a PKCE context . Example access_token = await client . get_access_token ( \"CODE\" , \"https://www.tintagel.bt/oauth-callback\" ) refresh_token \u00b6 Returns a fresh OAuth2Token object for the service given a refresh token. Raises a RefreshTokenNotSupportedError if no refresh_token_endpoint was provided. Parameters refresh_token: str : A valid refresh token for the service. Example access_token = await client . refresh_token ( \"REFRESH_TOKEN\" ) revoke_token \u00b6 Revokes a token. Raises a RevokeTokenNotSupportedError if no revoke_token_endpoint was provided. Parameters token: str : A token or refresh token to revoke. token_type_hint: str = None : Optional hint for the service to help it determine if it's a token or refresh token. Usually either token or refresh_token . Example await client . revoke_token ( \"TOKEN\" ) get_id_email \u00b6 Returns the id and the email (if available) of the authenticated user from the API provider. It assumes you have asked for the required scopes . Raises a GetIdEmailError if an error occurs. Parameters token: str : A valid access token. Example user_id , user_email = await client . get_id_email ( \"TOKEN\" ) OAuth2Token class \u00b6 This class is a wrapper around a standard Dict[str, Any] that bears the response of get_access_token . Properties can vary greatly from a service to another but, usually, you can get access token like this: access_token = token [ \"access_token\" ] is_expired \u00b6 A utility method is provided to quickly determine if the token is still valid or needs to be refreshed. Example if token . is_expired (): token = await client . refresh_token ( token [ \"refresh_token\" ]) # Save token to DB access_token = token [ \"access_token\" ] # Do something useful with this access token Provided clients \u00b6 We provide several ready-to-use clients for widely used services with configured endpoints and specificites took into account. OpenID \u00b6 Generic client for providers following the OpenID Connect protocol . Besides the Client ID and the Client Secret, you'll have to provide the OpenID configuration endpoint, allowing the client to discover the required endpoints automatically. By convention, it's usually served under the path .well-known/openid-configuration . from httpx_oauth.clients.openid import OpenID client = OpenID ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"https://example.fief.dev/.well-known/openid-configuration\" ) \u2753 refresh_token : depends if the OpenID provider supports it \u2753 revoke_token : depends if the OpenID provider supports it Discord \u00b6 from httpx_oauth.clients.discord import DiscordOAuth2 client = DiscordOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token Warning about get_id_email Email is optional for Discord accounts, so the email might be None . Facebook \u00b6 from httpx_oauth.clients.facebook import FacebookOAuth2 client = FacebookOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u274c refresh_token \u274c revoke_token get_long_lived_access_token \u00b6 Returns an OAuth2Token object with a long-lived access token given a short-lived access token. Raises a GetLongLivedAccessTokenError if an error occurs. Parameters token: str : A short-lived access token given by get_access_token . Example long_lived_access_token = await client . get_long_lived_access_token ( \"TOKEN\" ) GitHub \u00b6 from httpx_oauth.clients.github import GitHubOAuth2 client = GitHubOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u274c refresh_token \u274c revoke_token Tip You should enable Email addresses permission in the Permissions & events section of your GitHub app parameters. You can find it at https://github.com/settings/apps/{YOUR_APP}/permissions . Google \u00b6 from httpx_oauth.clients.google import GoogleOAuth2 client = GoogleOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token Kakao \u00b6 from httpx_oauth.clients.kakao import KakaoOAuth2 client = KakaoOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token LinkedIn \u00b6 from httpx_oauth.clients.linkedin import LinkedInOAuth2 client = LinkedInOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token (only for selected partners ) \u274c revoke_token NAVER \u00b6 from httpx_oauth.clients.naver import NaverOAuth2 client = NaverOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token Okta \u00b6 Based on the OpenID client . You need to provide the domain of your Okta domain for automatically discovering the required endpoints. from httpx_oauth.clients.okta import OktaOAuth2 client = OktaOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"example.okta.com\" ) \u2705 refresh_token \u2705 revoke_token Reddit \u00b6 from httpx_oauth.clients.reddit import RedditOAuth2 client = RedditOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token Warning about get_id_email Reddit API never return email addresses. Thus, e-mail will always be None . ``` Customize HTTPX client \u00b6 By default, requests are made using httpx.AsyncClient with default parameters. If you wish to customize settings, like setting timeout or proxies, you can do do by overloading the get_httpx_client method. from typing import AsyncContextManager import httpx from httpx_oauth.oauth2 import OAuth2 class OAuth2CustomTimeout ( OAuth2 ): def get_httpx_client ( self ) -> AsyncContextManager [ httpx . AsyncClient ]: return httpx . AsyncClient ( timeout = 10.0 ) # Use a default 10s timeout everywhere. client = OAuth2CustomTimeout ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"AUTHORIZE_ENDPOINT\" , \"ACCESS_TOKEN_ENDPOINT\" , refresh_token_endpoint = \"REFRESH_TOKEN_ENDPOINT\" , revoke_token_endpoint = \"REVOKE_TOKEN_ENDPOINT\" , )","title":"OAuth2"},{"location":"oauth2/#oauth2","text":"","title":"OAuth2"},{"location":"oauth2/#generic-client","text":"A generic OAuth2 class is provided to adapt to any OAuth2-compliant service. You can instantiate it like this: from httpx_oauth.oauth2 import OAuth2 client = OAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"AUTHORIZE_ENDPOINT\" , \"ACCESS_TOKEN_ENDPOINT\" , refresh_token_endpoint = \"REFRESH_TOKEN_ENDPOINT\" , revoke_token_endpoint = \"REVOKE_TOKEN_ENDPOINT\" , ) Note that refresh_token_endpoint and revoke_token_endpoint are optional since not every services propose to refresh and revoke tokens.","title":"Generic client"},{"location":"oauth2/#available-methods","text":"","title":"Available methods"},{"location":"oauth2/#get_authorization_url","text":"Returns the authorization URL where you should redirect the user to ask for their approval. Parameters redirect_uri: str : Your callback URI where the user will be redirected after the service prompt. state: str = None : Optional string that will be returned back in the callback parameters to allow you to retrieve state information. scope: Optional[List[str]] = None : Optional list of scopes to ask for. extras_params: Optional[Dict[str, Any]] = None : Optional dictionary containing parameters specific to the service. Example authorization_url = await client . get_authorization_url ( \"https://www.tintagel.bt/oauth-callback\" , scope = [ \"SCOPE1\" , \"SCOPE2\" , \"SCOPE3\" ], )","title":"get_authorization_url"},{"location":"oauth2/#get_access_token","text":"Returns an OAuth2Token object for the service given the authorization code passed in the redirection callback. Raises a GetAccessTokenError if an error occurs. Parameters code: str : The authorization code passed in the redirection callback. redirect_uri: str : The exact same redirect_uri you passed to the authorization URL. code_verifier: Optional[str] : Optional code verifier in a PKCE context . Example access_token = await client . get_access_token ( \"CODE\" , \"https://www.tintagel.bt/oauth-callback\" )","title":"get_access_token"},{"location":"oauth2/#refresh_token","text":"Returns a fresh OAuth2Token object for the service given a refresh token. Raises a RefreshTokenNotSupportedError if no refresh_token_endpoint was provided. Parameters refresh_token: str : A valid refresh token for the service. Example access_token = await client . refresh_token ( \"REFRESH_TOKEN\" )","title":"refresh_token"},{"location":"oauth2/#revoke_token","text":"Revokes a token. Raises a RevokeTokenNotSupportedError if no revoke_token_endpoint was provided. Parameters token: str : A token or refresh token to revoke. token_type_hint: str = None : Optional hint for the service to help it determine if it's a token or refresh token. Usually either token or refresh_token . Example await client . revoke_token ( \"TOKEN\" )","title":"revoke_token"},{"location":"oauth2/#get_id_email","text":"Returns the id and the email (if available) of the authenticated user from the API provider. It assumes you have asked for the required scopes . Raises a GetIdEmailError if an error occurs. Parameters token: str : A valid access token. Example user_id , user_email = await client . get_id_email ( \"TOKEN\" )","title":"get_id_email"},{"location":"oauth2/#oauth2token-class","text":"This class is a wrapper around a standard Dict[str, Any] that bears the response of get_access_token . Properties can vary greatly from a service to another but, usually, you can get access token like this: access_token = token [ \"access_token\" ]","title":"OAuth2Token class"},{"location":"oauth2/#is_expired","text":"A utility method is provided to quickly determine if the token is still valid or needs to be refreshed. Example if token . is_expired (): token = await client . refresh_token ( token [ \"refresh_token\" ]) # Save token to DB access_token = token [ \"access_token\" ] # Do something useful with this access token","title":"is_expired"},{"location":"oauth2/#provided-clients","text":"We provide several ready-to-use clients for widely used services with configured endpoints and specificites took into account.","title":"Provided clients"},{"location":"oauth2/#openid","text":"Generic client for providers following the OpenID Connect protocol . Besides the Client ID and the Client Secret, you'll have to provide the OpenID configuration endpoint, allowing the client to discover the required endpoints automatically. By convention, it's usually served under the path .well-known/openid-configuration . from httpx_oauth.clients.openid import OpenID client = OpenID ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"https://example.fief.dev/.well-known/openid-configuration\" ) \u2753 refresh_token : depends if the OpenID provider supports it \u2753 revoke_token : depends if the OpenID provider supports it","title":"OpenID"},{"location":"oauth2/#discord","text":"from httpx_oauth.clients.discord import DiscordOAuth2 client = DiscordOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token Warning about get_id_email Email is optional for Discord accounts, so the email might be None .","title":"Discord"},{"location":"oauth2/#facebook","text":"from httpx_oauth.clients.facebook import FacebookOAuth2 client = FacebookOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u274c refresh_token \u274c revoke_token","title":"Facebook"},{"location":"oauth2/#get_long_lived_access_token","text":"Returns an OAuth2Token object with a long-lived access token given a short-lived access token. Raises a GetLongLivedAccessTokenError if an error occurs. Parameters token: str : A short-lived access token given by get_access_token . Example long_lived_access_token = await client . get_long_lived_access_token ( \"TOKEN\" )","title":"get_long_lived_access_token"},{"location":"oauth2/#github","text":"from httpx_oauth.clients.github import GitHubOAuth2 client = GitHubOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u274c refresh_token \u274c revoke_token Tip You should enable Email addresses permission in the Permissions & events section of your GitHub app parameters. You can find it at https://github.com/settings/apps/{YOUR_APP}/permissions .","title":"GitHub"},{"location":"oauth2/#google","text":"from httpx_oauth.clients.google import GoogleOAuth2 client = GoogleOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token","title":"Google"},{"location":"oauth2/#kakao","text":"from httpx_oauth.clients.kakao import KakaoOAuth2 client = KakaoOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token","title":"Kakao"},{"location":"oauth2/#linkedin","text":"from httpx_oauth.clients.linkedin import LinkedInOAuth2 client = LinkedInOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token (only for selected partners ) \u274c revoke_token","title":"LinkedIn"},{"location":"oauth2/#naver","text":"from httpx_oauth.clients.naver import NaverOAuth2 client = NaverOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token","title":"NAVER"},{"location":"oauth2/#okta","text":"Based on the OpenID client . You need to provide the domain of your Okta domain for automatically discovering the required endpoints. from httpx_oauth.clients.okta import OktaOAuth2 client = OktaOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"example.okta.com\" ) \u2705 refresh_token \u2705 revoke_token","title":"Okta"},{"location":"oauth2/#reddit","text":"from httpx_oauth.clients.reddit import RedditOAuth2 client = RedditOAuth2 ( \"CLIENT_ID\" , \"CLIENT_SECRET\" ) \u2705 refresh_token \u2705 revoke_token Warning about get_id_email Reddit API never return email addresses. Thus, e-mail will always be None . ```","title":"Reddit"},{"location":"oauth2/#customize-httpx-client","text":"By default, requests are made using httpx.AsyncClient with default parameters. If you wish to customize settings, like setting timeout or proxies, you can do do by overloading the get_httpx_client method. from typing import AsyncContextManager import httpx from httpx_oauth.oauth2 import OAuth2 class OAuth2CustomTimeout ( OAuth2 ): def get_httpx_client ( self ) -> AsyncContextManager [ httpx . AsyncClient ]: return httpx . AsyncClient ( timeout = 10.0 ) # Use a default 10s timeout everywhere. client = OAuth2CustomTimeout ( \"CLIENT_ID\" , \"CLIENT_SECRET\" , \"AUTHORIZE_ENDPOINT\" , \"ACCESS_TOKEN_ENDPOINT\" , refresh_token_endpoint = \"REFRESH_TOKEN_ENDPOINT\" , revoke_token_endpoint = \"REVOKE_TOKEN_ENDPOINT\" , )","title":"Customize HTTPX client"}]}