{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HTTPX OAuth","text":"<p> Async OAuth client using HTTPX </p> <p> </p> <p></p> <p> </p> <p>Documentation: https://frankie567.github.io/httpx-oauth/</p> <p>Source Code: https://github.com/frankie567/httpx-oauth</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install httpx-oauth\n</code></pre>"},{"location":"#contributors","title":"Contributors \u2728","text":"<p>Thanks goes to these wonderful people (emoji key):</p> <sub>Fran\u00e7ois Voron</sub>\ud83d\udea7 <sub>Xavi Torell\u00f3</sub>\ud83d\udcbb <sub>dbf</sub>\ud83d\udcbb <sub>Kenton Parton</sub>\ud83d\udcbb <sub>stepan-chatalyan</sub>\ud83d\udcbb <sub>Foster Snowhill</sub>\ud83d\udcbb <sub>William Hatcher</sub>\ud83d\udcbb <sub>Matt Chan</sub>\ud83d\udce6 <sub>Goran Meki\u0107</sub>\ud83d\udce6 <sub>Joona Yoon</sub>\ud83d\udcbb <sub>LindezaGrey</sub>\ud83d\udcbb <sub>R. Singh</sub>\ud83d\udc1b <sub>Lukas L\u00f6sche</sub>\ud83d\udc1b \ud83d\udcbb <sub>James King</sub>\ud83d\udcbb <sub>Benedikt Volkmer</sub>\ud83d\udcbb \ud83d\udc1b <p>This project follows the all-contributors specification. Contributions of any kind welcome!</p>"},{"location":"#development","title":"Development","text":""},{"location":"#setup-environment","title":"Setup environment","text":"<p>We use Hatch to manage the development environment and production build. Ensure it's installed on your system.</p>"},{"location":"#run-unit-tests","title":"Run unit tests","text":"<p>You can run all the tests with:</p> <pre><code>hatch run test\n</code></pre>"},{"location":"#format-the-code","title":"Format the code","text":"<p>Execute the following command to apply <code>isort</code> and <code>black</code> formatting:</p> <pre><code>hatch run lint\n</code></pre>"},{"location":"#serve-the-documentation","title":"Serve the documentation","text":"<p>You can serve the documentation locally with the following command:</p> <pre><code>hatch run docs\n</code></pre> <p>The documentation will be available on http://localhost:8000.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"fastapi/","title":"FastAPI","text":"<p>Utilities are provided to ease the integration of an OAuth2 process in FastAPI.</p>"},{"location":"fastapi/#oauth2authorizecallback","title":"<code>OAuth2AuthorizeCallback</code>","text":"<p>Dependency callable to handle the authorization callback. It reads the query parameters and returns the access token and the state.</p> <pre><code>from fastapi import FastAPI, Depends\nfrom httpx_oauth.integrations.fastapi import OAuth2AuthorizeCallback\nfrom httpx_oauth.oauth2 import OAuth2\n\nclient = OAuth2(\"CLIENT_ID\", \"CLIENT_SECRET\", \"AUTHORIZE_ENDPOINT\", \"ACCESS_TOKEN_ENDPOINT\")\noauth2_authorize_callback = OAuth2AuthorizeCallback(client, \"oauth-callback\")\napp = FastAPI()\n\n@app.get(\"/oauth-callback\", name=\"oauth-callback\")\nasync def oauth_callback(access_token_state=Depends(oauth2_authorize_callback)):\n    token, state = access_token_state\n    # Do something useful\n</code></pre> <p>Reference</p>"},{"location":"fastapi/#custom-exception-handler","title":"Custom exception handler","text":"<p>If an error occurs inside the callback logic (the user denied access, the authorization code is invalid...), the dependency will raise OAuth2AuthorizeCallbackError.</p> <p>It inherits from FastAPI's HTTPException, so it's automatically handled by the default FastAPI exception handler. You can customize this behavior by implementing your own exception handler for <code>OAuth2AuthorizeCallbackError</code>.</p> <pre><code>from fastapi import FastAPI\nfrom httpx_oauth.integrations.fastapi import OAuth2AuthorizeCallbackError\n\napp = FastAPI()\n\n@app.exception_handler(OAuth2AuthorizeCallbackError)\nasync def oauth2_authorize_callback_error_handler(request: Request, exc: OAuth2AuthorizeCallbackError):\n    detail = exc.detail\n    status_code = exc.status_code\n    return JSONResponse(\n        status_code=status_code,\n        content={\"message\": \"The OAuth2 callback failed\", \"detail\": detail},\n    )\n</code></pre>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#create-a-client","title":"Create a client","text":"<p>A generic OAuth2 class is provided to adapt to any OAuth2-compliant service. You can instantiate it like this:</p> <pre><code>from httpx_oauth.oauth2 import OAuth2\n\nclient = OAuth2(\n    \"CLIENT_ID\",\n    \"CLIENT_SECRET\",\n    \"AUTHORIZE_ENDPOINT\",\n    \"ACCESS_TOKEN_ENDPOINT\",\n    refresh_token_endpoint=\"REFRESH_TOKEN_ENDPOINT\",\n    revoke_token_endpoint=\"REVOKE_TOKEN_ENDPOINT\",\n)\n</code></pre> <p>Note that <code>refresh_token_endpoint</code> and <code>revoke_token_endpoint</code> are optional since not every services propose to refresh and revoke tokens.</p>"},{"location":"usage/#generate-an-authorization-url","title":"Generate an authorization URL","text":"<p>Use the get_authorization_url method to generate the authorization URL where you should redirect the user to ask for their approval.</p> <pre><code>authorization_url = await client.get_authorization_url(\n    \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"],\n)\n</code></pre>"},{"location":"usage/#request-an-access-token","title":"Request an access token","text":"<p>Once you have the authorization code, use the get_access_token method to exchange it with a valid access token.</p> <p>It returns an OAuth2Token dictionary-like object.</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"usage/#refresh-an-access-token","title":"Refresh an access token","text":"<p>For providers supporting it, you can ask for a fresh access token given a refresh token. For this, use the refresh_token method.</p> <p>It returns an OAuth2Token dictionary-like object.</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"usage/#revoke-an-access-or-refresh-token","title":"Revoke an access or refresh token","text":"<p>For providers supporting it, you can ask to revoke an access or refresh token. For this, use the revoke_token method.</p>"},{"location":"usage/#get-authenticated-user-id-and-email","title":"Get authenticated user ID and email","text":"<p>For convenience, we provide a method that'll use a valid access token to query the provider API and get the ID and the email (if available) of the authenticated user. For this, use the get_id_email method.</p> <p>This method is implemented specifically on each provider.</p>"},{"location":"usage/#provided-clients","title":"Provided clients","text":"<p>Out-of-the box, we support lot of popular providers like Google or Facebook, for which we provided dedicated classes with pre-configured endpoints.</p> <p>Clients reference</p>"},{"location":"usage/#customize-httpx-client","title":"Customize HTTPX client","text":"<p>By default, requests are made using <code>httpx.AsyncClient</code> with default parameters. If you wish to customize settings, like setting timeout or proxies, you can do this by overloading the <code>get_httpx_client</code> method.</p> <pre><code>from typing import AsyncContextManager\n\nimport httpx\nfrom httpx_oauth.oauth2 import OAuth2\n\n\nclass OAuth2CustomTimeout(OAuth2):\n    def get_httpx_client(self) -&gt; AsyncContextManager[httpx.AsyncClient]:\n        return httpx.AsyncClient(timeout=10.0)  # Use a default 10s timeout everywhere.\n\n\nclient = OAuth2CustomTimeout(\n    \"CLIENT_ID\",\n    \"CLIENT_SECRET\",\n    \"AUTHORIZE_ENDPOINT\",\n    \"ACCESS_TOKEN_ENDPOINT\",\n    refresh_token_endpoint=\"REFRESH_TOKEN_ENDPOINT\",\n    revoke_token_endpoint=\"REVOKE_TOKEN_ENDPOINT\",\n)\n</code></pre>"},{"location":"reference/httpx_oauth.clients/","title":"Reference - Clients","text":""},{"location":"reference/httpx_oauth.clients/#discord","title":"Discord","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2","title":"<code>DiscordOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for Discord.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='discord')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'discord'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.discord.DiscordOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#facebook","title":"Facebook","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook","title":"<code>httpx_oauth.clients.facebook</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2","title":"<code>FacebookOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for Facebook.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='facebook')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'facebook'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.get_long_lived_access_token","title":"<code>get_long_lived_access_token(token)</code>  <code>async</code>","text":"<p>Request a long-lived access token given a short-lived access token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The short-lived access token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetLongLivedAccessTokenError</code> <p>An error occurred while requesting the long-lived access token.</p> <p>Examples:</p> <pre><code>long_lived_access_token = await client.get_long_lived_access_token(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.facebook.FacebookOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#github","title":"GitHub","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github","title":"<code>httpx_oauth.clients.github</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2","title":"<code>GitHubOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[GitHubOAuth2AuthorizeParams]</code></p> <p>OAuth2 client for GitHub.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='github')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'github'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>Tip</p> <p>You should enable Email addresses permission in the Permissions &amp; events section of your GitHub app parameters. You can find it at https://github.com/settings/apps/{YOUR_APP}/permissions.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Refresh tokens are not enabled by default</p> <p>Refresh tokens are currently an optional feature you need to enable in your GitHub app parameters. Read more.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.github.GitHubOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#google","title":"Google","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google","title":"<code>httpx_oauth.clients.google</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2","title":"<code>GoogleOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[GoogleOAuth2AuthorizeParams]</code></p> <p>OAuth2 client for Google.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='google')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'google'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.google.GoogleOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#kakao","title":"Kakao","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao","title":"<code>httpx_oauth.clients.kakao</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2","title":"<code>KakaoOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for Kakao.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='kakao')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'kakao'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.kakao.KakaoOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#linkedin","title":"LinkedIn","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin","title":"<code>httpx_oauth.clients.linkedin</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2","title":"<code>LinkedInOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for LinkedIn.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='linkedin')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'linkedin'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Warning</p> <p>Only available for selected partners.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.linkedin.LinkedInOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#microsoft","title":"Microsoft","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft","title":"<code>httpx_oauth.clients.microsoft</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2","title":"<code>MicrosoftGraphOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for Microsoft Graph API.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2.__init__","title":"<code>__init__(client_id, client_secret, tenant='common', scopes=BASE_SCOPES, name='microsoft')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>tenant</code> <code>str</code> <p>The tenant to use for the authorization URL.</p> <code>'common'</code> <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'microsoft'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, extras_params=None)</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.microsoft.MicrosoftGraphOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#naver","title":"Naver","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver","title":"<code>httpx_oauth.clients.naver</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2","title":"<code>NaverOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for Naver.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=BASE_SCOPES, name='naver')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'naver'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.naver.NaverOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#okta","title":"Okta","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta","title":"<code>httpx_oauth.clients.okta</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2","title":"<code>OktaOAuth2</code>","text":"<p>               Bases: <code>OpenID</code></p> <p>OAuth2 client for Okta.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2.__init__","title":"<code>__init__(client_id, client_secret, okta_domain, scopes=BASE_SCOPES, name='okta')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>okta_domain</code> <code>str</code> <p>The Okta organization domain.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'okta'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.okta.OktaOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#openid","title":"OpenID","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid","title":"<code>httpx_oauth.clients.openid</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID","title":"<code>OpenID</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>Generic client for providers following the OpenID Connect protocol.</p> <p>Besides the Client ID and the Client Secret, you'll have to provide the OpenID configuration endpoint, allowing the client to discover the required endpoints automatically. By convention, it's usually served under the path <code>.well-known/openid-configuration</code>.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID.__init__","title":"<code>__init__(client_id, client_secret, openid_configuration_endpoint, name='openid', base_scopes=BASE_SCOPES)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>openid_configuration_endpoint</code> <code>str</code> <p>OpenID Connect discovery endpoint URL.</p> required <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'openid'</code> <code>base_scopes</code> <code>Optional[List[str]]</code> <p>The base scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <p>Raises:</p> Type Description <code>OpenIDConfigurationError</code> <p>An error occurred while fetching the OpenID configuration.</p> <p>Examples:</p> <p>```py from httpx_oauth.clients.openid import OpenID</p> <p>client = OpenID(\"CLIENT_ID\", \"CLIENT_SECRET\", \"https://example.fief.dev/.well-known/openid-configuration\") ``</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenID.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.openid.OpenIDConfigurationError","title":"<code>OpenIDConfigurationError</code>","text":"<p>               Bases: <code>OAuth2RequestError</code></p> <p>Raised when an error occurred while fetching the OpenID configuration.</p>"},{"location":"reference/httpx_oauth.clients/#reddit","title":"Reddit","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit","title":"<code>httpx_oauth.clients.reddit</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2","title":"<code>RedditOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[Dict[str, Any]]</code></p> <p>OAuth2 client for Reddit.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2.__init__","title":"<code>__init__(client_id, client_secret, scopes=None, name='reddit')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>None</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'reddit'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.reddit.RedditOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.clients/#shopify","title":"Shopify","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify","title":"<code>httpx_oauth.clients.shopify</code>","text":""},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2","title":"<code>ShopifyOAuth2</code>","text":"<p>               Bases: <code>BaseOAuth2[ShopifyOAuth2AuthorizeParams]</code></p> <p>OAuth2 client for Shopify.</p> <p>The OAuth2 client for Shopify authenticates shop owners to allow making calls to the Shopify Admin API.</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2.__init__","title":"<code>__init__(client_id, client_secret, shop, scopes=BASE_SCOPES, api_version='2023-04', name='shopify')</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>shop</code> <code>str</code> <p>The shop subdomain.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>The default scopes to be used in the authorization URL.</p> <code>BASE_SCOPES</code> <code>api_version</code> <code>str</code> <p>The version of the Shopify Admin API.</p> <code>'2023-04'</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'shopify'</code>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p><code>get_id_email</code> is based on the <code>Shop</code> resource</p> <p>The implementation of <code>get_id_email</code> calls the Get Shop endpoint of the Shopify Admin API. It means that it'll return you the ID of the shop and the email of the shop owner.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.clients/#httpx_oauth.clients.shopify.ShopifyOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.exceptions/","title":"Reference - Exceptions","text":""},{"location":"reference/httpx_oauth.exceptions/#httpx_oauth.exceptions.GetIdEmailError","title":"<code>GetIdEmailError</code>","text":"<p>               Bases: <code>HTTPXOAuthError</code></p> <p>Error raised while retrieving user profile from provider API.</p>"},{"location":"reference/httpx_oauth.exceptions/#httpx_oauth.exceptions.HTTPXOAuthError","title":"<code>HTTPXOAuthError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception class for every httpx-oauth errors.</p>"},{"location":"reference/httpx_oauth.integrations.fastapi/","title":"Reference - Integrations - FastAPI","text":""},{"location":"reference/httpx_oauth.integrations.fastapi/#httpx_oauth.integrations.fastapi.OAuth2AuthorizeCallback","title":"<code>OAuth2AuthorizeCallback</code>","text":"<p>Dependency callable to handle the authorization callback. It reads the query parameters and returns the access token and the state.</p> <p>Examples:</p> <pre><code>from fastapi import FastAPI, Depends\nfrom httpx_oauth.integrations.fastapi import OAuth2AuthorizeCallback\nfrom httpx_oauth.oauth2 import OAuth2\n\nclient = OAuth2(\"CLIENT_ID\", \"CLIENT_SECRET\", \"AUTHORIZE_ENDPOINT\", \"ACCESS_TOKEN_ENDPOINT\")\noauth2_authorize_callback = OAuth2AuthorizeCallback(client, \"oauth-callback\")\napp = FastAPI()\n\n@app.get(\"/oauth-callback\", name=\"oauth-callback\")\nasync def oauth_callback(access_token_state=Depends(oauth2_authorize_callback)):\n    token, state = access_token_state\n    # Do something useful\n</code></pre>"},{"location":"reference/httpx_oauth.integrations.fastapi/#httpx_oauth.integrations.fastapi.OAuth2AuthorizeCallback.__init__","title":"<code>__init__(client, route_name=None, redirect_url=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client</code> <code>BaseOAuth2</code> <p>An OAuth2 client.</p> required <code>route_name</code> <code>Optional[str]</code> <p>Name of the callback route, as defined in the <code>name</code> parameter of the route decorator.</p> <code>None</code> <code>redirect_url</code> <code>Optional[str]</code> <p>Full URL to the callback route.</p> <code>None</code>"},{"location":"reference/httpx_oauth.integrations.fastapi/#httpx_oauth.integrations.fastapi.OAuth2AuthorizeCallbackError","title":"<code>OAuth2AuthorizeCallbackError</code>","text":"<p>               Bases: <code>HTTPException</code>, <code>OAuth2Error</code></p> <p>Error raised when an error occurs during the OAuth2 authorization callback.</p> <p>It inherits from HTTPException, so you can either keep the default FastAPI error handling or implement a dedicated exception handler.</p>"},{"location":"reference/httpx_oauth.oauth2/","title":"Reference - OAuth2","text":""},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.OAuth2","title":"<code>OAuth2 = BaseOAuth2[Dict[str, Any]]</code>  <code>module-attribute</code>","text":"<p>Generic OAuth2 client.</p> <p>Examples:</p> <pre><code>from httpx_oauth.oauth2 import OAuth2\n\nclient = OAuth2(\n    \"CLIENT_ID\",\n    \"CLIENT_SECRET\",\n    \"AUTHORIZE_ENDPOINT\",\n    \"ACCESS_TOKEN_ENDPOINT\",\n    refresh_token_endpoint=\"REFRESH_TOKEN_ENDPOINT\",\n    revoke_token_endpoint=\"REVOKE_TOKEN_ENDPOINT\",\n)\n</code></pre>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.OAuth2ClientAuthMethod","title":"<code>OAuth2ClientAuthMethod = Literal['client_secret_basic', 'client_secret_post']</code>  <code>module-attribute</code>","text":"<p>Supported OAuth2 client authentication methods.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2","title":"<code>BaseOAuth2</code>","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Base OAuth2 client.</p> <p>This class provides a base implementation for OAuth2 clients. If you need to use a generic client, use OAuth2 instead.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2.__init__","title":"<code>__init__(client_id, client_secret, authorize_endpoint, access_token_endpoint, refresh_token_endpoint=None, revoke_token_endpoint=None, *, name='oauth2', base_scopes=None, token_endpoint_auth_method='client_secret_post', revocation_endpoint_auth_method=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The client ID provided by the OAuth2 provider.</p> required <code>client_secret</code> <code>str</code> <p>The client secret provided by the OAuth2 provider.</p> required <code>authorize_endpoint</code> <code>str</code> <p>The authorization endpoint URL.</p> required <code>access_token_endpoint</code> <code>str</code> <p>The access token endpoint URL.</p> required <code>refresh_token_endpoint</code> <code>Optional[str]</code> <p>The refresh token endpoint URL. If not supported, set it to <code>None</code>.</p> <code>None</code> <code>revoke_token_endpoint</code> <code>Optional[str]</code> <p>The revoke token endpoint URL. If not supported, set it to <code>None</code>.</p> <code>None</code> <code>name</code> <code>str</code> <p>A unique name for the OAuth2 client.</p> <code>'oauth2'</code> <code>base_scopes</code> <code>Optional[List[str]]</code> <p>The base scopes to be used in the authorization URL.</p> <code>None</code> <code>token_endpoint_auth_method</code> <code>OAuth2ClientAuthMethod</code> <p>The authentication method to be used in the token endpoint.</p> <code>'client_secret_post'</code> <code>revocation_endpoint_auth_method</code> <code>Optional[OAuth2ClientAuthMethod]</code> <p>The authentication method to be used in the revocation endpoint. If the revocation endpoint is not supported, set it to <code>None</code>.</p> <code>None</code> <p>Raises:</p> Type Description <code>NotSupportedAuthMethodError</code> <p>The provided authentication method is not supported.</p> <code>MissingRevokeTokenAuthMethodError</code> <p>The revocation endpoint auth method is missing.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2.get_access_token","title":"<code>get_access_token(code, redirect_uri, code_verifier=None)</code>  <code>async</code>","text":"<p>Requests an access token using the authorization code obtained after the user has authorized the application.</p> <p>Parameters:</p> Name Type Description Default <code>code</code> <code>str</code> <p>The authorization code.</p> required <code>redirect_uri</code> <code>str</code> <p>The URL where the user was redirected after authorization.</p> required <code>code_verifier</code> <code>Optional[str]</code> <p>Optional code verifier used in the PKCE) flow.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>GetAccessTokenError</code> <p>An error occurred while getting the access token.</p> <p>Examples:</p> <pre><code>access_token = await client.get_access_token(\"CODE\", \"https://www.tintagel.bt/oauth-callback\")\n</code></pre>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2.get_authorization_url","title":"<code>get_authorization_url(redirect_uri, state=None, scope=None, code_challenge=None, code_challenge_method=None, extras_params=None)</code>  <code>async</code>","text":"<p>Builds the authorization URL where the user should be redirected to authorize the application.</p> <p>Parameters:</p> Name Type Description Default <code>redirect_uri</code> <code>str</code> <p>The URL where the user will be redirected after authorization.</p> required <code>state</code> <code>Optional[str]</code> <p>An opaque value used by the client to maintain state between the request and the callback.</p> <code>None</code> <code>scope</code> <code>Optional[List[str]]</code> <p>The scopes to be requested. If not provided, <code>base_scopes</code> will be used.</p> <code>None</code> <code>code_challenge</code> <code>Optional[str]</code> <p>Optional PKCE) code challenge.</p> <code>None</code> <code>code_challenge_method</code> <code>Optional[Literal['plain', 'S256']]</code> <p>Optional PKCE) code challenge method.</p> <code>None</code> <code>extras_params</code> <code>Optional[T]</code> <p>Optional extra parameters specific to the service.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The authorization URL.</p> <p>Examples:</p> <p><code>py authorization_url = await client.get_authorization_url(     \"https://www.tintagel.bt/oauth-callback\", scope=[\"SCOPE1\", \"SCOPE2\", \"SCOPE3\"], )</code>py</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2.get_id_email","title":"<code>get_id_email(token)</code>  <code>async</code>","text":"<p>Returns the id and the email (if available) of the authenticated user from the API provider.</p> <p>It assumes you have asked for the required scopes.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The access token.</p> required <p>Returns:</p> Type Description <code>Tuple[str, Optional[str]]</code> <p>A tuple with the id and the email of the authenticated user.</p> <p>Raises:</p> Type Description <code>GetIdEmailError</code> <p>An error occurred while getting the id and email.</p> <p>Examples:</p> <pre><code>user_id, user_email = await client.get_id_email(\"TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2.refresh_token","title":"<code>refresh_token(refresh_token)</code>  <code>async</code>","text":"<p>Requests a new access token using a refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>refresh_token</code> <code>str</code> <p>The refresh token.</p> required <p>Returns:</p> Type Description <code>OAuth2Token</code> <p>An access token response dictionary.</p> <p>Raises:</p> Type Description <code>RefreshTokenError</code> <p>An error occurred while refreshing the token.</p> <code>RefreshTokenNotSupportedError</code> <p>The provider does not support token refresh.</p> <p>Examples:</p> <pre><code>access_token = await client.refresh_token(\"REFRESH_TOKEN\")\n</code></pre>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.BaseOAuth2.revoke_token","title":"<code>revoke_token(token, token_type_hint=None)</code>  <code>async</code>","text":"<p>Revokes a token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>A token or refresh token to revoke.</p> required <code>token_type_hint</code> <code>Optional[str]</code> <p>Optional hint for the service to help it determine if it's a token or refresh token. Usually either <code>token</code> or <code>refresh_token</code>.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> <p>None</p> <p>Raises:</p> Type Description <code>RevokeTokenError</code> <p>An error occurred while revoking the token.</p> <code>RevokeTokenNotSupportedError</code> <p>The provider does not support token revoke.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.GetAccessTokenError","title":"<code>GetAccessTokenError</code>","text":"<p>               Bases: <code>OAuth2RequestError</code></p> <p>Error raised when an error occurs while getting an access token.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.MissingRevokeTokenAuthMethodError","title":"<code>MissingRevokeTokenAuthMethodError</code>","text":"<p>               Bases: <code>OAuth2Error</code></p> <p>Error raised when the revocation endpoint auth method is missing.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.NotSupportedAuthMethodError","title":"<code>NotSupportedAuthMethodError</code>","text":"<p>               Bases: <code>OAuth2Error</code></p> <p>Error raised when an unsupported authentication method is used.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.OAuth2Error","title":"<code>OAuth2Error</code>","text":"<p>               Bases: <code>HTTPXOAuthError</code></p> <p>Base exception class for OAuth2 client errors.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.OAuth2RequestError","title":"<code>OAuth2RequestError</code>","text":"<p>               Bases: <code>OAuth2Error</code></p> <p>Base exception class for OAuth2 request errors.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.OAuth2Token","title":"<code>OAuth2Token</code>","text":"<p>               Bases: <code>Dict[str, Any]</code></p> <p>Wrapper around a standard <code>Dict[str, Any]</code> that bears the response of a successful token request.</p> <p>Properties can vary greatly from a service to another but, usually, you can get access token like this:</p> <p>Examples:</p> <pre><code>access_token = token[\"access_token\"]\n</code></pre>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.OAuth2Token.is_expired","title":"<code>is_expired()</code>","text":"<p>Checks if the token is expired.</p> <p>Returns:</p> Type Description <code>bool</code> <p>True if the token is expired, False otherwise</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.RefreshTokenError","title":"<code>RefreshTokenError</code>","text":"<p>               Bases: <code>OAuth2RequestError</code></p> <p>Error raised when an error occurs while refreshing a token.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.RefreshTokenNotSupportedError","title":"<code>RefreshTokenNotSupportedError</code>","text":"<p>               Bases: <code>OAuth2Error</code></p> <p>Error raised when trying to refresh a token on a provider that does not support it.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.RevokeTokenError","title":"<code>RevokeTokenError</code>","text":"<p>               Bases: <code>OAuth2RequestError</code></p> <p>Error raised when an error occurs while revoking a token.</p>"},{"location":"reference/httpx_oauth.oauth2/#httpx_oauth.oauth2.RevokeTokenNotSupportedError","title":"<code>RevokeTokenNotSupportedError</code>","text":"<p>               Bases: <code>OAuth2Error</code></p> <p>Error raised when trying to revole a token on a provider that does not support it.</p>"}]}